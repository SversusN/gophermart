// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package http_mocks is a generated GoMock package.
package http_mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/SversusN/gophermart/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepoInterface is a mock of AuthRepoInterface interface.
type MockAuthRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoInterfaceMockRecorder
}

// MockAuthRepoInterfaceMockRecorder is the mock recorder for MockAuthRepoInterface.
type MockAuthRepoInterfaceMockRecorder struct {
	mock *MockAuthRepoInterface
}

// NewMockAuthRepoInterface creates a new mock instance.
func NewMockAuthRepoInterface(ctrl *gomock.Controller) *MockAuthRepoInterface {
	mock := &MockAuthRepoInterface{ctrl: ctrl}
	mock.recorder = &MockAuthRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepoInterface) EXPECT() *MockAuthRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepoInterface) CreateUser(ctx context.Context, user *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepoInterface)(nil).CreateUser), ctx, user)
}

// GetUserID mocks base method.
func (m *MockAuthRepoInterface) GetUserID(ctx context.Context, user *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthRepoInterfaceMockRecorder) GetUserID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthRepoInterface)(nil).GetUserID), ctx, user)
}

// MockAccrualOrderInterface is a mock of AccrualOrderInterface interface.
type MockAccrualOrderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualOrderInterfaceMockRecorder
}

// MockAccrualOrderInterfaceMockRecorder is the mock recorder for MockAccrualOrderInterface.
type MockAccrualOrderInterfaceMockRecorder struct {
	mock *MockAccrualOrderInterface
}

// NewMockAccrualOrderInterface creates a new mock instance.
func NewMockAccrualOrderInterface(ctrl *gomock.Controller) *MockAccrualOrderInterface {
	mock := &MockAccrualOrderInterface{ctrl: ctrl}
	mock.recorder = &MockAccrualOrderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualOrderInterface) EXPECT() *MockAccrualOrderInterfaceMockRecorder {
	return m.recorder
}

// GetUploadedOrders mocks base method.
func (m *MockAccrualOrderInterface) GetUploadedOrders(ctx context.Context, userID int) ([]model.AccrualOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadedOrders", ctx, userID)
	ret0, _ := ret[0].([]model.AccrualOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadedOrders indicates an expected call of GetUploadedOrders.
func (mr *MockAccrualOrderInterfaceMockRecorder) GetUploadedOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadedOrders", reflect.TypeOf((*MockAccrualOrderInterface)(nil).GetUploadedOrders), ctx, userID)
}

// GetUserIDByNumberOrder mocks base method.
func (m *MockAccrualOrderInterface) GetUserIDByNumberOrder(ctx context.Context, number uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByNumberOrder", ctx, number)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserIDByNumberOrder indicates an expected call of GetUserIDByNumberOrder.
func (mr *MockAccrualOrderInterfaceMockRecorder) GetUserIDByNumberOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByNumberOrder", reflect.TypeOf((*MockAccrualOrderInterface)(nil).GetUserIDByNumberOrder), ctx, number)
}

// SaveOrder mocks base method.
func (m *MockAccrualOrderInterface) SaveOrder(ctx context.Context, order *model.AccrualOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockAccrualOrderInterfaceMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockAccrualOrderInterface)(nil).SaveOrder), ctx, order)
}

// MockWithdrawOrderRepoInterface is a mock of WithdrawOrderRepoInterface interface.
type MockWithdrawOrderRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawOrderRepoInterfaceMockRecorder
}

// MockWithdrawOrderRepoInterfaceMockRecorder is the mock recorder for MockWithdrawOrderRepoInterface.
type MockWithdrawOrderRepoInterfaceMockRecorder struct {
	mock *MockWithdrawOrderRepoInterface
}

// NewMockWithdrawOrderRepoInterface creates a new mock instance.
func NewMockWithdrawOrderRepoInterface(ctrl *gomock.Controller) *MockWithdrawOrderRepoInterface {
	mock := &MockWithdrawOrderRepoInterface{ctrl: ctrl}
	mock.recorder = &MockWithdrawOrderRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawOrderRepoInterface) EXPECT() *MockWithdrawOrderRepoInterfaceMockRecorder {
	return m.recorder
}

// DeductPoints mocks base method.
func (m *MockWithdrawOrderRepoInterface) DeductPoints(ctx context.Context, order *model.WithdrawOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductPoints", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductPoints indicates an expected call of DeductPoints.
func (mr *MockWithdrawOrderRepoInterfaceMockRecorder) DeductPoints(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductPoints", reflect.TypeOf((*MockWithdrawOrderRepoInterface)(nil).DeductPoints), ctx, order)
}

// GetAccruals mocks base method.
func (m *MockWithdrawOrderRepoInterface) GetAccruals(ctx context.Context, UserID int) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccruals", ctx, UserID)
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetAccruals indicates an expected call of GetAccruals.
func (mr *MockWithdrawOrderRepoInterfaceMockRecorder) GetAccruals(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccruals", reflect.TypeOf((*MockWithdrawOrderRepoInterface)(nil).GetAccruals), ctx, UserID)
}

// GetWithdrawalOfPoints mocks base method.
func (m *MockWithdrawOrderRepoInterface) GetWithdrawalOfPoints(ctx context.Context, userID int) ([]model.WithdrawOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalOfPoints", ctx, userID)
	ret0, _ := ret[0].([]model.WithdrawOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalOfPoints indicates an expected call of GetWithdrawalOfPoints.
func (mr *MockWithdrawOrderRepoInterfaceMockRecorder) GetWithdrawalOfPoints(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalOfPoints", reflect.TypeOf((*MockWithdrawOrderRepoInterface)(nil).GetWithdrawalOfPoints), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawOrderRepoInterface) GetWithdrawals(ctx context.Context, UserID int) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, UserID)
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawOrderRepoInterfaceMockRecorder) GetWithdrawals(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawOrderRepoInterface)(nil).GetWithdrawals), ctx, UserID)
}
